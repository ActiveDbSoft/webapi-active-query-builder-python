# coding: utf-8

"""
    QueryBuilderApi

    Active Query Builder Web API lets create, analyze and modify SQL queries for different database servers using RESTful HTTP requests to a cloud-based service. It requires SQL execution context (information about database schema and used database server) to be stored under the registered account at https://webapi.activequerybuilder.com/.

    OpenAPI spec version: 1.1.3
    Contact: support@activedbsoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class TransformResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, sql=None, totals=None, error=None):
        """
        TransformResult - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'sql': 'str',
            'totals': 'str',
            'error': 'str'
        }

        self.attribute_map = {
            'sql': 'sql',
            'totals': 'totals',
            'error': 'error'
        }

        self._sql = sql
        self._totals = totals
        self._error = error

    @property
    def sql(self):
        """
        Gets the sql of this TransformResult.
        Transformed SQL text.

        :return: The sql of this TransformResult.
        :rtype: str
        """
        return self._sql

    @sql.setter
    def sql(self, sql):
        """
        Sets the sql of this TransformResult.
        Transformed SQL text.

        :param sql: The sql of this TransformResult.
        :type: str
        """

        self._sql = sql

    @property
    def totals(self):
        """
        Gets the totals of this TransformResult.
        Transformed SQL text for totals.

        :return: The totals of this TransformResult.
        :rtype: str
        """
        return self._totals

    @totals.setter
    def totals(self, totals):
        """
        Sets the totals of this TransformResult.
        Transformed SQL text for totals.

        :param totals: The totals of this TransformResult.
        :type: str
        """

        self._totals = totals

    @property
    def error(self):
        """
        Gets the error of this TransformResult.
        Error message text.

        :return: The error of this TransformResult.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """
        Sets the error of this TransformResult.
        Error message text.

        :param error: The error of this TransformResult.
        :type: str
        """

        self._error = error

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
